class Solution {
    public boolean isPalindrome(ListNode head) {
        if (head == null || head.next == null) {
            return true; // An empty list or a single node list is a palindrome
        }

        // Step 1: Find the middle of the linked list
        ListNode slow = head;
        ListNode fast = head;

        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }

        // Step 2: Reverse the second half of the list
        ListNode prev = null;
        ListNode cur = slow;

        while (cur != null) {
            ListNode next = cur.next;
            cur.next = prev; // Reverse the link
            prev = cur;      // Move prev to current node
            cur = next;      // Move to the next node
        }

        // Step 3: Compare the first half and the reversed second half
        ListNode left = head;    // Pointer for the first half
        ListNode right = prev;   // Pointer for the reversed second half

        while (right != null) {
            if (left.val != right.val) {
                return false; // Not a palindrome
            }
            left = left.next; // Move to the next node in the first half
            right = right.next; // Move to the next node in the reversed second half
        }

        return true; // It's a palindrome
    }
}